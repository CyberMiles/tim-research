[Bancor]
Disclaimer: This is my brief summary of Bancor. This information is based on my personal understanding of the white paper, the web site and the openly licensed Solidity smart contract code which resides in GitHub. This document offers no advice nor opinions. This document has only been produced to exercise my personal understanding; it serves as a place to jot down my notes to prompt my thinking. 

= Bancor

== Background

Bancor is essentially a non-profit automated market maker. The governing software will sell tokens to buyers and buy tokens from sellers. This trading activity has no spread (profits taken by the traditional synchronous buy/sell process). 

=== Traditional synchronous trading

By synchronous, we mean that at any given time (in the context of a trade) we have a double coincidence of wants. Put simply, in traditional trading, the system has to find two parties who agree to buy/sell each other's tokens, at a particular price, at that particular point in time (the synchronous trade). In the traditional trading model the current market price is fundamentally based on the "last" price (between the buyers and sellers). In Bankor however, there is no buyer and seller agreement. The price is constantly being calculated mathematically based on several factors such as the amount of inventory (tokens) which have been staked in the network, the amount of tokens being asked to be bought as well as the amount of tokens being asked to be sold.

=== Asynchronous trading 

Bancor is different to traditional markets (which facilitate synchronous trades). Bancor provides constant liquidity. The system will always trade tokens because tokens are mathematically linked to each other. Anytime a buyer or seller takes action the asynchronous nature of the system will respond appropriately with a trade. "The Bancor protocol represents the first technological solution for the classic problem in economics known as the “Double Coincidence of Wants”, in the domain of asset exchange" [1].

=== Liquidity vs price

It is important to discern liquidity from price. Liquidity is the ability to perform a trade; Bancor always provides liquidity regardless of price. Price can change due to several factors. For example, if the holder of a token believes that there is no utility or purpose for the token they may sell the token. If this continues (holders not seeing utility or purpose and therefore selling tokens) the price will become lower and lower. Interestingly, if others do see potential and purpose of a token they will buy-in at a certain price point. The buying of these same tokens will then increase the tokens price. This supply and demand tug-of-war is fundamentally known as price discovery.

=== Arbritrage

Bancor is interesting in that it provides its own online exchange between the world's supply of tokens and in addition provides the open source source code (used by its own exchange) to implement this sort of exchange on other blockchain networks. 

In a single exchange situation (where a given token is only listed on one exchange interface) price discovery works as previously described. When tokens are selling the price decreases, when tokens are being bought the price increases. Of course buyers and sellers constantly make decisions and take action to buy and sell their tokens at certain price points. Again, this supply and demand is basic price discovery.

When a given token is listed on many exchanges, we have this notion of arbritrage. Arbritrage essentially involves the buying and selling of tokens via exchanges which are not synced. This buying and selling (buying at a low price on one exchange and instantly selling for a higher price on another exchange) for profit is essentially a way in which a trader can take advantage of pricing indiscrepancies (pricing errors) of the same commodity which is listed on different exchanges.

Bancor provides constant liquidity and so it can be surmised that its more efficient market making should result in smoother and shorter deviations from a particular tokens overall fair value price point.

== Bancor technology

Bancor has two main components SmartTokens and Connectors. "Through the use of smart-contracts, Smart Tokens can be created that hold one or more other tokens as connectors. Tokens may represent existing national currencies or other types of assets" [1]. Bancor invites any new token https://support.bancor.network/hc/en-us/articles/360002098551-Apply-to-join-the-Bancor-Network[to join the Bancor exchange network via an online application form]. The token in question can run on any blockchain network i.e. Ethereum EOS etc.

=== Smart Tokens

"Smart Tokens™, are always available to be both bought and sold directly through their smart contracts. In other words,
the token’s governing software always offers to sell tokens to buyers and buy back tokens from sellers" [2].

"A Relay Token is an ERC20 compliant Smart Token that is configured with two connectors"[3]. The "two connector balances, each  have a 50% weight and can contain any amount of an ERC20 token. A Relay Token's primary utility is to allow converting between each of its connector balances" [4].

==== ERC20 compatibility

"All Smart Tokens are ERC20-compatible tokens, meaning they function as and are compatible with any system or service which supports these now-standard Ethereum-based tokens" [2]. There is an official https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md[Ethereum ERC20 standard interface for tokens] as well as many examples of ERC20 implementations in the field. For example, you can see the Solidity code for one of https://github.com/ConsenSys/Tokens/blob/master/contracts/eip20/EIP20.sol[Consensys’s ERC20 implementations here] and you can see the Solidity code for one of the https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/token/ERC20/ERC20.sol[OpenZeppelin StandardTokens here].

== Bancor implementation

As previously shown, Bancor Smart Tokens are implemented differently to the standard ERC20 tokens, which we linked to above. "Smart tokens are money that hold money"[5]. 

=== Bancor implementation using CyberMiles Remix/Metamask integration. Method A.

I wrote https://gist.github.com/tpmccallum/929c04f7268be7375e5403afc10195cc[a Gist which explains how to install the CyberMiles development environment] (complete with Remix browser based compiler/editor and Metamask extension for Chrome etc).

The following code originates from the Bancor GitHub. Specifically, https://github.com/bancorprotocol/contracts/blob/master/solidity/contracts/token/SmartToken.sol[the SmartToken.sol file].

I have linked to the imports (using GitHub URLs) and this has been successfully deployed to the CyberMiles testnet (with a transaction hash of 0x27147ce0bfd4a97fa1fa8b8f9db7e60788bda4454539025f091681201ebacd2a).

[source, javascript]
----
pragma solidity ^0.4.23;
import 'github.com/bancorprotocol/contracts/solidity/contracts/token/ERC20Token.sol';
import 'github.com/bancorprotocol/contracts/solidity/contracts/token/interfaces/ISmartToken.sol';
import 'github.com/bancorprotocol/contracts/solidity/contracts/utility/Owned.sol';
import 'github.com/bancorprotocol/contracts/solidity/contracts/utility/TokenHolder.sol';

/*
    Smart Token v0.3

    'Owned' is specified here for readability reasons
*/
contract SmartToken is ISmartToken, Owned, ERC20Token, TokenHolder {
    string public version = '0.3';

    bool public transfersEnabled = true;    // true if transfer/transferFrom are enabled, false if not

    // triggered when a smart token is deployed - the _token address is defined for forward compatibility, in case we want to trigger the event from a factory
    event NewSmartToken(address _token);
    // triggered when the total supply is increased
    event Issuance(uint256 _amount);
    // triggered when the total supply is decreased
    event Destruction(uint256 _amount);

    /**
        @dev constructor

        @param _name       token name
        @param _symbol     token short symbol, minimum 1 character
        @param _decimals   for display purposes only
    */
    constructor(string _name, string _symbol, uint8 _decimals)
        public
        ERC20Token(_name, _symbol, _decimals)
    {
        emit NewSmartToken(address(this));
    }

    // allows execution only when transfers aren't disabled
    modifier transfersAllowed {
        assert(transfersEnabled);
        _;
    }

    /**
        @dev disables/enables transfers
        can only be called by the contract owner

        @param _disable    true to disable transfers, false to enable them
    */
    function disableTransfers(bool _disable) public ownerOnly {
        transfersEnabled = !_disable;
    }

    /**
        @dev increases the token supply and sends the new tokens to an account
        can only be called by the contract owner

        @param _to         account to receive the new amount
        @param _amount     amount to increase the supply by
    */
    function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }

    /**
        @dev removes tokens from an account and decreases the token supply
        can be called by the contract owner to destroy tokens from any account or by any holder to destroy tokens from his/her own account

        @param _from       account to remove the amount from
        @param _amount     amount to decrease the supply by
    */
    function destroy(address _from, uint256 _amount) public {
        require(msg.sender == _from || msg.sender == owner); // validate input

        balanceOf[_from] = safeSub(balanceOf[_from], _amount);
        totalSupply = safeSub(totalSupply, _amount);

        emit Transfer(_from, this, _amount);
        emit Destruction(_amount);
    }

    // ERC20 standard method overrides with some extra functionality

    /**
        @dev send coins
        throws on any error rather then return a false flag to minimize user errors
        in addition to the standard checks, the function throws if transfers are disabled

        @param _to      target address
        @param _value   transfer amount

        @return true if the transfer was successful, false if it wasn't
    */
    function transfer(address _to, uint256 _value) public transfersAllowed returns (bool success) {
        assert(super.transfer(_to, _value));
        return true;
    }

    /**
        @dev an account/contract attempts to get the coins
        throws on any error rather then return a false flag to minimize user errors
        in addition to the standard checks, the function throws if transfers are disabled

        @param _from    source address
        @param _to      target address
        @param _value   transfer amount

        @return true if the transfer was successful, false if it wasn't
    */
    function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool success) {
        assert(super.transferFrom(_from, _to, _value));
        return true;
    }
}

----

If I want to take a look at the contract, I can head over to the command line on my testnet node and run the following command (the getTransactionReceipt command which takes the transaction hash as an argument).

[source, bash]
----
cmt.getTransactionReceipt("0x27147ce0bfd4a97fa1fa8b8f9db7e60788bda4454539025f091681201ebacd2a")
----

The output from the above command is as follows. I can see now that the contract has an address of 0xbcc3a887ee24ae99a88ddf785cf286b7860f0187 and that it was processed into the blockchain at block number 51555.

[source, javascript]
----
{
  blockHash: "0x77704ef223182cbfd559febe1de0a886b551c724e3632f64869374b86b6c7124",
  blockNumber: 51555,
  contractAddress: "0xbcc3a887ee24ae99a88ddf785cf286b7860f0187",
  cumulativeGasUsed: 2160912,
  from: "0x92e6d8b2de61b1bf6e76217993c7ccca5c8270ae",
  gasUsed: 2160912,
  logs: [{
      address: "0xbcc3a887ee24ae99a88ddf785cf286b7860f0187",
      blockHash: "0x77704ef223182cbfd559febe1de0a886b551c724e3632f64869374b86b6c7124",
      blockNumber: 51555,
      data: "0x000000000000000000000000bcc3a887ee24ae99a88ddf785cf286b7860f0187",
      logIndex: 0,
      removed: false,
      topics: ["0xf4cd1f8571e8d9c97ffcb81558807ab73f9803d54de5da6a0420593c82a4a9f0"],
      transactionHash: "0x27147ce0bfd4a97fa1fa8b8f9db7e60788bda4454539025f091681201ebacd2a",
      transactionIndex: 0
  }],
  logsBloom: "0x0000000000000000000...0000000000000000000",
  root: "0xe7e5fd7e8b765ecf263dda990f358ab0e2bbdf2e8c6460be4c8918962cd34e67",
  to: null,
  transactionHash: "0x27147ce0bfd4a97fa1fa8b8f9db7e60788bda4454539025f091681201ebacd2a",
  transactionIndex: 0
}
----

=== Bancor implementation using CyberMiles Lity (macOS High Sierra). Method B

Another, yet more complex, way to deploy the Bancor SmartToken.sol is by compiling it in the command line.

[source,bash]
----
cd ~
git clone https://github.com/CyberMiles/lity.git
cd lity
mkdir build
cd build
cmake ..
make
----

==== Clone Bancor contracts

[source, bash]
----
cd ~
https://github.com/bancorprotocol/contracts.git
----

==== Compile Bancor using Lity

[source, bash]
----
./lityc/lityc --allow-paths ../, --bin-runtime ~/contracts/solidity/contracts/token/SmartToken.sol
----

Note the use of --allow-paths in the command above. This is required because the Bancor Solidity files are referencing other Bancor Solidity files using relative paths i.e. import '../utility/Utils.sol';

In order to allow the use of relative paths the syntax below must be used. Note the trailing comma! --allow-paths ../,
Syntax like --allow-paths ../ will not work.

[source, bash]
----
--allow-paths .
--allow-paths ./,
--allow-paths ../,
----

[source, bash]
----
./lityc/lityc --allow-paths ../, --abi ~/contracts/solidity/contracts/token/SmartToken.sol
----

==== Compile Bancor using Lity - In a single step

The above shows how to use Lity to compile .sol contracts. It is easier and neater to do all of this work in a single step like this.

[source, bash]
----
mkdir output
./lityc/lityc --allow-paths ../, --abi --bin -o output/ ~/contracts/solidity/contracts/token/SmartToken.sol
----

==== Create and fund a test account

I ran the following command to create the new account and then headed over to http://travis-faucet.cybermiles.io/ to grab some test CMT from the faucet.

[source, javascript]
----
personal.newAccount();
----

I then unlock the account

[source, javascript]
----
personal.unlockAccount("0xdc13d113fca85a2873d9ffd254bc556d80e52483", "password")
----

==== Deploy the contract

I then grab the abi and binary executable and create the contract. The variable abi consists of the output/SmartToken.abi file's contents and the bytecode consists of the output/SmartToken.bin file's contents.

The output from the following command is used to create the abi variable

[source, bash]
----
cat output/SmartToken.abi
----

Like this

[source, javascript]
----
var abi = [{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}], ... "name":"OwnerUpdate","type":"event"}]
----

The output from the following command is used to create the bytecode variable

[source, bash]
----
cat output/SmartToken.bin 
----

Like this, be sure to add a 0x to the start of the bytecode string.

[source, javascript]
----
var bytecode = "0x608060405260408051908101604052 ... fe49f9e0029"
----

The next task is to construct a contract object which can be run (note the "asdf", "asd" and 8 arguments; these are the 3 arguments required by the SmartToken's constructor).

[source, javascript]
----
var newContract = web3.cmt.contract(abi);
deployedContract = newContract.new("asdf", "asd", 8, {from: web3.cmt.accounts[0],data: bytecode,gas: "5000000"});
----

Typing deployedContract into the terminal will reveal, amongst other things, the contracts new address, transaction hash as well as a list of functions which I can now call.

[source, javascript]
----
  address: "0x94280fb7cf373b6578f4b3c4484581ad317ed9a2",
  transactionHash: "0x6e4aa245620b83fc5dc8135816f0db2ff6e7c890baee591f17db1eb5f39c9647",
  Approval: function(),
  Destruction: function(),
  Issuance: function(),
  NewSmartToken: function(),
  OwnerUpdate: function(),
  Transfer: function(),
  acceptOwnership: function(),
  allEvents: function(),
  allowance: function(),
  approve: function(),
  balanceOf: function(),
  decimals: function(),
  destroy: function(),
  disableTransfers: function(),
  issue: function(),
  name: function(),
  newOwner: function(),
  owner: function(),
  standard: function(),
  symbol: function(),
  totalSupply: function(),
  transfer: function(),
  transferFrom: function(),
  transferOwnership: function(),
  transfersEnabled: function(),
  version: function(),
  withdrawTokens: function()
----

==== Reconnecting with a past contract

Just out of interest if the session has been closed I can initialize a new set of variables to interact with the contract like this.

[source, javascript]
----
var existingContract = web3.cmt.contract(abi);
var contractInstance = existingContract.at("0x94280fb7cf373b6578f4b3c4484581ad317ed9a2");
----


==== Manually call the contract's many functions

I can call each of these functions in this same session by using the contract's variable called deployed contract.

[source, javascript]
----
deployedContract.totalSupply()
0
----

If I want to call the function issue I will need to ensure that the right arguments are passed in when the function is called. I can see the arguments (_to of type address and _amount of type uint256) in the Solidity file

[source, javascript]
----

function issue(address _to, uint256 _amount)
        public
        ownerOnly
        validAddress(_to)
        notThis(_to)
    {
        totalSupply = safeAdd(totalSupply, _amount);
        balanceOf[_to] = safeAdd(balanceOf[_to], _amount);

        emit Issuance(_amount);
        emit Transfer(this, _to, _amount);
    }
----

=== Compile and deploy the contract in an automated fashion - Method C (private network only - testing only)

I have created a Python script called https://github.com/CyberMiles/tim-research/blob/master/bancor/generate_tests.py[generate_tests.py]. Follow the directions at the top of the Python file. This file will compile, deploy and report on a contract. It can also be used to assert unit tests in web3.

= References

[1] https://github.com/bancorprotocol/contracts

[2] https://storage.googleapis.com/website-bancor/2018/04/01ba8253-bancor_protocol_whitepaper_en.pdf

[3] https://support.bancor.network/hc/en-us/articles/360000458052-What-is-a-Relay-Token-

[4] https://support.bancor.network/hc/en-us/articles/360000471472-How-do-Relay-Tokens-work-

[5] https://blog.bancor.network/smart-tokens-101-63edc2cc5a89





