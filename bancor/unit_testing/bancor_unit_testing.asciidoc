= Running Bancor tests on macOS High Sierra (10.13.6)

The following instructions will facilitate the testing of Bancor smart contracts as outlined on the official Bancor Contracts GitHub repository [1].

== Nodejs and npm

Install nodejs v8.3.0 or above from https://nodejs.org/en/download/

Install npm npm v5.3.0 or above from https://www.npmjs.com/get-npm

== Truffle

[source, bash]
----

npm install -g truffle

----

== Ganache

[source, bash]
----

git clone https://github.com/trufflesuite/ganache.git

cd ganache

npm install

npm start

----

== Additional dependencies 
[source, bash]
----

npm install decimal.js --save

npm install ethereumjs-util --save

npm install web3-utils --save

----

== Bancor Contracts

[source, bash]
----

git clone https://github.com/bancorprotocol/contracts.git

cd contracts

npm test

----

The output will be similar to what is pictured below (output has been truncated to save space on this page)

[source, bash]
----

Compiling ./contracts/BancorNetwork.sol...
Compiling ./contracts/ContractIds.sol...
Compiling ./contracts/FeatureIds.sol...
Compiling ./contracts/IBancorNetwork.sol...
Compiling ./contracts/converter/BancorConverter.sol...
Compiling ./contracts/converter/BancorConverterFactory.sol...
Compiling ./contracts/converter/BancorConverterUpgrader.sol...
Compiling ./contracts/converter/BancorFormula.sol...
Compiling ./contracts/converter/BancorGasPriceLimit.sol...
Compiling ./contracts/converter/interfaces/IBancorConverter.sol...
Compiling ./contracts/converter/interfaces/IBancorConverterFactory.sol...
Compiling ./contracts/converter/interfaces/IBancorFormula.sol...
Compiling ./contracts/converter/interfaces/IBancorGasPriceLimit.sol...
Compiling ./contracts/crowdsale/CrowdsaleController.sol...
Compiling ./contracts/helpers/Migrations.sol...
Compiling ./contracts/helpers/TestBancorFormula.sol...
Compiling ./contracts/helpers/TestCrowdsaleController.sol...
Compiling ./contracts/helpers/TestERC20Token.sol...
Compiling ./contracts/helpers/TestFeatures.sol...
Compiling ./contracts/helpers/TestUtils.sol...
Compiling ./contracts/legacy/BancorPriceFloor.sol...
Compiling ./contracts/token/ERC20Token.sol...
Compiling ./contracts/token/EtherToken.sol...
Compiling ./contracts/token/SmartToken.sol...
Compiling ./contracts/token/SmartTokenController.sol...
Compiling ./contracts/token/interfaces/IERC20Token.sol...
Compiling ./contracts/token/interfaces/IEtherToken.sol...
Compiling ./contracts/token/interfaces/ISmartToken.sol...
Compiling ./contracts/utility/ContractFeatures.sol...
Compiling ./contracts/utility/ContractRegistry.sol...
Compiling ./contracts/utility/Managed.sol...
Compiling ./contracts/utility/Owned.sol...
Compiling ./contracts/utility/TokenHolder.sol...
Compiling ./contracts/utility/Utils.sol...
Compiling ./contracts/utility/Whitelist.sol...
Compiling ./contracts/utility/interfaces/IContractFeatures.sol...
Compiling ./contracts/utility/interfaces/IContractRegistry.sol...
Compiling ./contracts/utility/interfaces/IOwned.sol...
Compiling ./contracts/utility/interfaces/ITokenHolder.sol...
Compiling ./contracts/utility/interfaces/IWhitelist.sol...

----

[source, bash]
----
Contract: BancorConverter
    ✓ verifies the converter data after construction (340ms)
    ✓ should throw when attempting to construct a converter with no token
    ✓ should throw when attempting to construct a converter with no contract registry (74ms)
    ✓ should throw when attempting to construct a converter with invalid max fee (103ms)
    ✓ verifies the first connector when provided at construction time (155ms)
    ✓ should throw when attempting to construct a converter with a connector with invalid weight (102ms)
    ✓ verifies the connector token count before / after adding a connector (267ms)
    ✓ verifies the owner can update the converter contract registry contract address (193ms)
    ✓ should throw when a non owner attempts update the converter contract registry contract address (170ms)
    ✓ should throw when the attempts update the converter contract registry contract address with an invalid address (206ms)
    ✓ should throw when the owner attempts update the converter contract registry contract address with the converter address (415ms)
    ✓ verifies the owner can update the conversion whitelist contract address (409ms)
    ✓ should throw when a non owner attempts update the conversion whitelist contract address (140ms)
    ✓ verifies the owner can remove the conversion whitelist contract address (201ms)
    ✓ should throw when the owner attempts update the conversion whitelist contract address with the converter address (267ms)
    ✓ verifies the owner can update the fee (257ms)
    ✓ verifies the manager can update the fee (289ms)
    ✓ should throw when attempting to update the fee to an invalid value (269ms)
    ✓ should throw when a non owner and non manager attempts to update the fee (805ms)
    ✓ verifies that getFinalAmount returns the correct amount (216ms)
    ✓ verifies that an event is fired when the owner update the fee (335ms)
    ✓ verifies that an event is fired when the owner update the fee multiple times (1913ms)
    ✓ should not fire an event when attempting to update the fee to an invalid value (511ms)
    ✓ should not fire an event when a non owner attempts to update the fee (246ms)
    ✓ verifies that 2 connectors are added correctly (414ms)
    ✓ should throw when a non owner attempts to add a connector (140ms)
    ✓ should throw when attempting to add a connector when the converter is active (420ms)
    ✓ should throw when attempting to add a connector with invalid address (352ms)
    ✓ should throw when attempting to add a connector with weight = 0 (227ms)
    ✓ should throw when attempting to add a connector with weight greater than 100% (139ms)

----

= References
[1] https://github.com/bancorprotocol/contracts#testing

