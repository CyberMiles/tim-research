[Blockchain Scaling]
[[Plasma]]
== Plasma: Blockchains within blockchains

Plasma allows blockchains to exist within blockchains. If you think about this topology you will realise that it provides exponential scaling for blockchains. The best real world example which comes to mind is population growth. For example great grandparent, grandparents, parents can have many children. Only the validity of the child blockchains are stored on the parent chain, negating the need to store all of the gritty details of every transaction on the main chain. 

Whilst costly, interactions with the main chain are only necessary when evidence of a dispute is provided. This evidence comes in the form of a proof. But who creates these proofs? How does anyone find out whether an invalid transaction is being performed. This on-chain/off-chain model is analogous to how https://people.cs.uchicago.edu/~teutsch/papers/truebit.pdf[TrueBit] works. TrueBit allows untrusted parties (called solvers) on the Ethereum blockchain to solve computational tasks and in turn collect rewards. Of course on the flip side, anyone at all can challenge the outcome of a solver's computational task. Incentives and consequences keep the solvers honest. These sorts of models run under the assumption that all parties involved wish to maximize thier own profit. As a general rule, with accountability and penalties in place, most transactions will simply be performed in a valid manner. This reduces the need to store every tiny transaction and transfer of value, on the main chain, all of the time. 

== Sparse Merkle Trie - a more efficient and simpler alternative Ethereum's Merkle Patricia Trie

From a blockchain scaling perspective, languages which are simpler and safer than Solidity will be good candidates for writing and testing exclusion and inclusion proofs. For example Vyper's pythonic syntax already provides a head start to developers who are interested in writing smart contracts which will one day be enveloped by Ethereum's alternative data infrastructure. Ethereum currently uses the complex Merkle Patricia Trie, however Vitalik has recently demonstrated https://github.com/ethereum/research/tree/master/trie_research/bintrie2[via code] that the Sparse Merkle Trie has the potential to surpass Ethereum's current data infrastructure in efficiency and simplicity as well as storage and bandwidth.
