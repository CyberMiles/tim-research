[Gemini dollar]
Disclaimer: This is my brief summary of the stablecoin Gemini. This information is based on my personal understanding of the white paper, the announcement and the Solidity smart contract code. This document has only been produced to exercise my personal understanding; serves as a place to jot down my notes to prompt my thinking.

= Gemini dollar

The white paper [1] talks about trust and how a fiat-pegged stablecoin requires both cryptographic proof as well as trust due to its reliance on a central issuer. The announcement [2] presents the fact that "to date, there has been no trusted *and* regulated digital representation of the U.S. dollar that moves in an open, decentralized manner like cryptocurrencies".

The Gemini dollar:
* an Ethereum ERC20 compliant token
* issued by Gemini, a New York trust company
* strictly pegged to the U.S. dollar in a 1:1 relationship
* overseen by the New York State Department of Financial Services (NYDFS)
* the world’s first regulated stablecoin 

The first issuance of 100, 000 tokens is recorded in the Gemini Dollar Independent Accountants Report[3]. The report show the US Dollar reconciled balance of USD Gemini accounts is at $100, 000. These balances of accounts will be examined monthly by an independent accounting firm. The report also asserts that the amount of Gemini tokens issued and in circulation are in fact 100, 000 units. These tokens represent the Gemini dollar (GUSD) which is technically an ERC20 compliant token which can be publicly viewed on Etherscan [4] or any other Ethereum block explorer. The GUSD can be transferred on the Ethereum main network. The GUSD can be stored in any valid Ethereum address on the main Ethereum network.

The issuance of GUSD is regulated and as such the issuer requires a level of technical functionality in relation to the GUSD token. Below is an overview of the Ethereum ERC20 token smart contract code [5] for the GUSD.

Firstly, the following diagram illustrates the GUSD smart contract's inheritance.

image::solidity_inheritance_gusd.png[]

The image above shows that the individual ERC20Proxy, ERC20Impl and ERCStore smart contracts all inherit from other smart contracts. 

== ERC20Proxy smart contract

From the outside, the ERC20Proxy smart contract is the public face of the GUSD. The ERC20Proxy smart contract contains no business logic. The executable logic is written in the ERC20Impl smart contract. The execution is essentially delegated and therefore, the logic of the ERC20Proxy smart contract's functions can be changed/upgraded by the custodian if the custodian changes/upgrades the ERC20Impl smart contract.

== ERC20Imple smart contract

The ERC20Impl smart contract contains the business logic in relation to token supply, token transfers, token burning and so forth. Some of the ERC20Impl smart contract functions can only be executed by the calling ERC20Proxy smart contract address; this is enforced through the use of a Modifier named onlyProxy. Interestingly, in much the same way as ERC20Proxy delegates logic to ERC20Impl, ERC20Impl delegates the data storage tasks to another smart contract called ERC20Store.

== ERC20Store

The ERC20Store smart contract also implements a Modifier which only allows functions to be called, in this case, by the ERC20Impl smart contract address. The name of this Modifier is called onlyImpl. 

== Contract upgrades - offline approval mechanism

In certain high-risk situations, an offline approval mechanism is required. The workflow for an offline approval is along the lines of the following. Firstly the ERC20Proxy smart contract is instructed to delegate active token implementation to a brand new instance of the ERC20Impl smart contract. The current instance of the ERC20Impl smart contract can be seen in Etherscan [5] (the 5th variable in the list). Secondly, The ERC20Store smart contract is instructed to adopt this new instance of the ERC20Impl smart contract as its single trusted source when accepting any updates in relation to the GUSD. These activities can only be executed if provided with the correct custodian. The current custodian of the ERC20Proxy smart contract can be seen on Etherscan (the 4th variable in the list). It appears that these smart contracts are designed to interoperate and therefore have an inherent relationship between instances of each other as well as custodians of each other. Below is a diagram which illustrates the current state of the smart contract instances and the custodians.

image::smart_contract_instances.png[]

As you can see from the diagram above a 1:1 relationship exists between ERC20Proxy and ERC20Impl. Further, another 1:1 relationship exists between the particular instance of ERC20Impl and ERC20Store. These relationships are enforced in the smart contract code via the use of Modifiers (which require the caller of a function to be a particular address). For example, if a new instance of ERC20Impl is created (let's call it ERC20Impl_v2) then the instance of ERC20Proxy will now only be able to interact with ERC20Impl_v2. Similarly, the ERC20Store will only interact with ERC20Impl_v2. As mentioned previously, this approval to interact is enforced in the smart contract code by Modifiers; there can only ever be one address which is allowed to interact with an instance of a GUSD smart contract.

Interestingly, I did a diff on the ERC20Proxy, ERC20Impl and the ERC20Store and the source code files are identical i.e. each one has all of the code which the other 2 have. Put another way, they all have an exact copy of the LockRequestable CustodianUpgradable, ERC20Impl, ERC20Interface, ERC20ImplUpgradeable, ERC20Proxy and ERC20Store smart contracts. Given that the ERC20Proxy contract is the public facing endpoint, I guess that any changes to the logic in the ERC20Impl contract in the future will mean that the contracts will diverge in source code in some way. My thinking is that this is not really an issue. Come to think of it, the code for the Proxy, Impl and Store could have been separated out in the first place, however there would have still been a very similar amount of redundancy due to the inheritance which is leveraged in the code.


[1] https://gemini.com/wp-content/themes/gemini/assets/img/dollar/gemini-dollar-whitepaper.pdf

[2] https://medium.com/gemini/gemini-launches-the-gemini-dollar-62787f963fb4

[3] https://gemini.com/wp-content/themes/gemini/assets/img/dollar/gemini-dollar-examination-report-09-09-18.pdf

[4] https://etherscan.io/token/0x056fd409e1d7a124bd7017459dfea2f387b6d5cd

[5] https://etherscan.io/address/0x056fd409e1d7a124bd7017459dfea2f387b6d5cd#code

[6] https://etherscan.io/address/0x056fd409e1d7a124bd7017459dfea2f387b6d5cd#readContract



