[EOSIO Dawn 3.0]

== Executive summary
This document provides first impressions of EOSIO Dawn 3.0. The information in this document is derived from the EOSIO MIT Licensed GitHub documentation and code. The ideas and conclusions in this document are based on the actual results of first hand implementation and testing of the EOSIO software. Real examples are provided, and as such, the verbose content can be found in the appendicies.

EOS claims to be the most powerful infrastructure for decentralized applications. It has many proposed strenghts and the development, discussion and community activity within EOS is looking extremely promising and genuine.

EOS is due to launch in mid 2018. At present EOS Dawn 3 (a precursor to the main launch) is demonstrating that a lot of the proposed strengths are still under active development. It is unclear, probably unlikely, that all of the proposed strengths will be realized in time for the mid 2018 launch. Examples of this are as follows:

* Whilst very high transaction per second throughput is likely to be achieve in the long term, at present testing demonstrates that approximately 1, 000 transactions per second is realistic and achievable. It is believed that this may scale up to as many as 30, 000 transactions per second, but this can only be achieved as other functionality such as transaction scope and so forth are implemented and tested
* Whilst interblockchain communication is likely to be achieved in the long term, at present interoperability between EOS chains looks promising, but interoperability between other blockchains does not seem to be practicable. This is due, in part, to the fact that transacting with other blockchains like Ethereum may result in high gas prices. At this stage the costs associated with interoperability between non EOS chains may negate the benefits of the interaction
* The EOS network manages resources in a decentralized fashion. At present, it is unlikely that EOS will provide a decentralized storage mechanism. This may be realized later in the year and in future releases


== Overview

=== EOS 
Unlike other blockchain software releases, the creators of EOS, BlockOne are not launching any blockchains. BlockOne are releasing the open source software which anyone can use to launch their own blockchain implementation.

=== Codebase
EOS expect that C++ will be the best language for developing high-performance and secure smart contracts and therefore EOS plan to use C++ for the foreseeable future. There is an link:https://tbfleming.github.io/cib/eos.html[online EOS Integrated Development Environment (IDE)] which allows smart contracts to be written and deployed using only your web browser (Firefox is recommended).

=== Wallets
An EOS wallet can be thought of as a repository of public-private key pairs. There is no inherent relationship between accounts and wallets. Accounts do not know about wallets, and vice versa. 

**Warning:** It is important that you run your own keosd wallet daemon locally for security purposes. 

Whilst you can create, and interact with, a wallet using cleos, this is not recommended unless you are simply testing and experimenting on a local private network. 

=== Actions
An action represents a single operation.

=== Transactions
A transaction holds one or more actions for execution; stored in the actions array. Each instance of an action in the actions array has the following key value pairs, account, name, authorization and data. Executing a transaction results in a transaction hash. Receiving the hash does not mean that the transaction was confirmed, rather just that its syntax was without error (the transaction was valid). Confirmation of successful execution can be verified by inspecting the transaction history and obtaining the block number in which the transaction was included. 

The combination of actions (sent as transactions) and automated action handlers is how EOSIO defines smart contracts [4].

=== Smart Contracts
Actions can be sent individually, or in combined form if they are intended to be executed as a whole. EOS smart contracts communicate with each other via these transactions. 

=== Accounts
Performing actions on the blockchain requires the use of accounts. Each account can send structured actions to other accounts and may define scripts to handle actions when they are received. The EOSIO software gives each account its own private database which can only be accessed by its own action handlers.

=== State and scope
An EOS smart contract (contractA) can read the state of another EOS contract (contractB) as long as both contractA and contractB are defined within the read scope of the transaction.

==== The timing of communication between smart contracts
EOS smart contracts have 2 communication modes; inline and deferred, these can both be defined within a given smart contract

Inline:: 
* Guaranteed to execute in the current transaction, or unwind
* Scope and authority is explicitly aligned with the original contract
* No notification of completion
* Nothing is scheduled for future, beyond the current transaction

Deferred::
* Execution set for a time in the future, at a producerâ€™s discretion, but can timeout
* Able to reach out to different scopes as well as carry the authority of the contract that sends them
* Able to communicate the result of the completed communication
* Can be considered scheduled in nature, for future transactions

=== User interaction
EOSIO has a strong focus on the command line at this stage. There are a number of command line programs (executables) which allow users to interact with the blockchain, as well as associated wallets, accounts and so forth.

Programs::
* nodeos - is a server-side blockchain node component. It is located at build/programs/nodeos/nodeos
* keosd - is a component used to *manage* EOSIO wallets and their content. It is located at build/programs/keosd/keosd
* cleos - is a command line interface used to *access* wallets and accounts. cleos also invokes actions on the blockchain. It is located at build/programs/cleos/cleos

There is no inherent relationship between nodeos and keosd, this is logical because there is no inherent relationship between accounts and wallets. cleos effectively serves as an intermediary between keosd key retrieval operations and nodeos account (and other) blockchain actions that require signatures generated using those keys.

image:images/Accounts-and-Wallets-Overview.png[]

For a comprehensive and up to date list of commands, visit this https://github.com/EOSIO/eos/wiki/Command%20Reference[EOS Command Reference link].

=== EOSIO Dawn 3.0 Installation
The following commands can be used to install EOSIO Dawn 3.0 on Ubuntu 16.04LTS, run the EOSIO unit tests as well as add the EOSIO executables to the operating system's path.

Installation::
[source,bash]
----
cd ~
git clone https://github.com/EOSIO/eos.git
cd ~/eos
git submodule update --init --recursive
./eosio_build.sh
----

Program availability::
Run the following command in order to make the EOSIO executables available (installation of executables in /usr/local/bin) in standard $PATH. 

[source,bash]
----
cd ~/eos/build
sudo make install
----

Tests::
To test the installation, start mongodb and then run the tests in the build directory as per the commands below. The results of the tests should appear as those in this document's Appendix A.

[source,bash]
----
~/opt/mongodb/bin/mongod -f ~/opt/mongodb/mongod.conf &
cd ~/eos/build
make test
----

The following section offers two alternatives to running EOSIO. Firstly you can start running your own single node on your local computer. Alternatively, you can start participating on a real tesnet. The first alternative of running your own single node locally is much quicker and safer (for rapid experimentation). The second alternative, which allows you to participate on a real testnet is a little more complex and has potential hazards. Don't be put off participating in a real testnet if that is what you really want. This document will help you understand the complexities and hazards and enable you to successfully participate and write smart contracts on a real testnet.

=== 1 - Running your own single node locally
The following commands will install and run your own single node EOSIO blockchain which will immediately commence producing a block every 500ms.

[source,bash]
----
cd ~/eos/build/programs/nodeos
./nodeos -e -p eosio --plugin eosio::wallet_api_plugin --plugin eosio::chain_api_plugin --plugin eosio::account_history_api_plugin 
----

==== Configuration
On Ubuntu, the configuration file (config.ini) and the genesis file (genesis.json) are both found in the .local/share/eosio/nodeos/config folder. In a production settings, nodeos will need a properly configured config.ini file in order to do meaningful work. However if one is not present, such as in this test case, the system will create one by default. The default file which EOSIO creats can be seen in this document's Appendix B.

==== Creating a wallet
The following command will create a wallet called "default.wallet" in the ~/eosio-wallet directory.

[source,bash]
----
cleos wallet create
----

To overide the location where the wallet will be created use the --data-dir argument when issuing the command as shown below.

[source,bash]
----
cleos wallet create --data-dir /home/username/my_wallet_dir
----

Creating more than one (default) wallet will require additional wallets to be named exclusively. This can be done by using the -n argument when issuing the command as shown below.

[source,bash]
----
cleos wallet create -n anotherWallet
----

The wallets on a system can be listed using the following command.

[source,bash]
----
cleos wallet list
----

Wallets created using the above commands are unlocked, for your convenience, by default. An unlocked wallet shows an asterix when listed.

A wallet can be locked by name using the -n argument as shown in the following command. Coversly a wallet can be unlocked by using the word unlock. 

[source,bash]
----
cleos wallet lock -n anotherWallet
----

Wallets have to be open (not unlocked) for any operations to take place. For example wallets can not even be listed if they are not open. A wallet can be opened, by name, as per the following command.

[source,bash]
----
cleos wallet open -n anotherWallet
----

*The wallet file itself is encrypted*, so the wallet will protect these keys when it's locked. *Remember to lock a wallet when operations on the wallet have been completed*.

==== Creating EOSIO key pairs
The following command will create an arbitrary keypair. Special attention must be paid to the fact that the public keys are prefixed with the characters EOS and that private keys must not be shared, whatsoever. 

The general use case for creating EOSIO key pairs and importing them into a wallet is to run the following command twice (recording both key pairs for safekeeping). The outputs from the following command (run a total of 2 times) will be required for the next step, importing keys into a wallet.

[source,bash]
----
cleos create key
----

==== Importing keys into a wallet
The following command needs to be run twice, once for each of the private keys which were created above. Note, the wallet which is having the 2 private keys imported into it, will need to be both open and unlocked before the following command is executed. 

[source,bash]
----
cleos wallet import oxoxoxoxoooPRIVATEKEYoooxoxoxoo...
----

==== Testing that keys were imported successfully
The following command will list the 2 key pairs, which we just imported into the wallet; evidence that the import worked.

[source,bash]
----
cleos wallet keys
----

=== 2 - Running on a real testnet
One of the most important steps, in relation to running on a real testnet, is correctly securing your wallet. The following steps will help you run your own wallet using keosd. This is very different to the steps in the previous section (which instead used the cleos command in a local private testnet environment).


== Delegated Proof of Stake (DPoS)

== Governance and economics
EOS blocks are produced by block producers. In order to become a block producer a candidate is required to publicly respond to a list of check mark criteria as well as fill out a form, post to steem and email EOSGo. These requirements are covered in this section.

=== Centralization 
Centralization is the process by which the activities of an organization, particularly those regarding planning and decision-making, become concentrated within a particular location or group [2]. Some argue that the Delegated Proof of Stake (DPoS) consensus mechanism, which EOS uses, is centralized when compared to other consensus mechasisms such as Ethereum's current Proof of Work (PoW). However, others argue against this view with reference to the most recent data from PoW mining pools. The diagram below illustrates the percentage of Ethereum's distributed PoW hashing power. More specifically, how the vast majority of Ethereum's hashing power is spread across only a handful of the most powerful and centralized mining pools in the world [3].
image:images/mining_pools.jpeg[]

=== EOS Block Producer Candidates
Block producers are an integral part of the EOSIO blockchain implementation and infrastructure. Block producers are also known, in other blockchain circles, as super nodes or validating nodes or master nodes etc. The following section will cover the role of EOSIO block producers in-depth. For example, how block producers become qualified for their position, how token holders vote for block producers, as well as the rewards and consequences for being a good (or bad) block producer on the EOS network. Attack vectors which may threaten block producers will also be covered.

==== Radical transparency
Anyone who holds tokens on an EOS network can participate in the production of blocks. Those who wish to become a block producer are required to respond to 8 check mark criteria. Moreover, they are required to publicly post 6 of the 8 check mark criteria on the Steem blockchain. This ensures that a permanent record of each candidate's response and commitment is stored on an immutable public blockchain.

==== Voting for block producers
Block producers are elected into their role through a continuous approval voting system which involves, among other things, convincing other token holders to vote for them.

==== Block producer roles and responsibilities
Block producers are randomly ordered to produce the upcoming EOS blocks; there is a fixed schedule which outlines which block producers are responsible for producing specific blocks during a given period of time. Only one block producer at a single point in time can produce the block to which they were assigned. If a block producer goes off line during this time, the block to which they were assigned does not get created. 

==== Rewards and incentives
100% of block rewards are divided up between 21 block producers. Therefore each block producer receives 4.76190476 % of the total rewards each (4.76190476 * 21 = 100).

==== Consequences and punishment
There are certain actions (bad behaviour) which will result in undesirable consequences and potential punishment for a block producer. These include, but are not limited to:
* signing two or more blocks with the same timestamp
* signing two or more blocks with the same blockheight
* being off-line (unavailable) during the scheduled time of block production
Poorly fulfilling oneâ€™s role as a block producer will result in economic loss from a) missing the block rewards for the current block and b) future losses due to the fact that they may no longer be able to convince others that they are reliable enough to hold their position as block producer.

==== Disqualification

==== Security

=== Block producer application process
Those who want to become block producers will need to perform the following.

. Fill out the following https://docs.google.com/forms/d/e/1FAIpQLSddSjEbgx_Ti5YuYMb_3WWWTWFqmyHW5Q7DMJ_RR_OL2EMsQQ/viewform[Block Producer Candidate Form]

. Get a https://blocktrades.us/create-steem-account[Steem account]

. Complete the following Block producer check mark criteria (including posting to Steem)

. Candidates will also need to email admin@eosgo.io and include a link to the Steem blockchain posts in order to be acknowledged and receive the check mark criteria. 

+
**Tuesday May 15 2018 (at 23:59 UTC) marks the closing time for block producer applications as outlined above.**

=== Block producer check mark criteria
This section lists, in full detail, the check mark criteria which is required in order for a block producer to achieve candidature.

. Public website URL and at least one social media account (all social media links offered by candidate will be shared in report)
+
As a public representative of a powerful common resource, a community presence is expected.

. Links to the following ID information, **all posted to the Steem blockchain** (either in one post or multiple)
..  Official block producer candidate name.
..  Location of company headquarters.
..  Expected location of servers. 
..  Type of servers (cloud, bare metal, etc).
..  Current employee list and pictures of at least 67% of staff.
..  Relevant background qualifications for at least 67% of staff.
+
Clear identity of company and employees is important, according to the majority of BP candidates

. Estimate of technical specifications and total expenditure for resources by June 3, 2018 - **posted to Steem blockchain**
+
Check mark given for any estimate, modesty encouraged by permanent Steem record. Quality and accuracy of effort judged by the community in public document.

. Estimated scaling plan for hardware after June 3, 2018 - **posted to Steem blockchain**
+
Rough outlines receive a check mark, open review gauges the effort.

. Community benefit project outline, only for projects expected to be public by June 3, 2018 - **posted to Steem blockchain**
+
BPs overwhelmingly agreed on the importance of community benefit projects.

. Listing of Telegram and node names for community testnet participation
+
If you still need to join, start at https://t.me/CommunityTestnet

. Block Producer Candidate Roadmap on values, community project timeline, finances, transparency, or any other topic the candidate deems important. Please show the direction and future of your candidacy **in a Steem post for the community**
+
Any roadmap labeled as such by the block producer candidate will earn a check mark - community gauges the effort.

. Position on Dividends (The sharing of Block Producer inflation rewards with unaffiliated voters, AKA "vote buying.")
+
Please describe the block producer candidate's stance on sharing inflation rewards and/or paying dividends to EOS token holders. All information pertaining to this point must be written **in a Steem post for the community**

.. Will the organization offer payment to EOS token voters for any reason, including BP elections AND worker proposals?
.. Does the organization have a written policy of no-payment for votes? If so, please provide a link.

== Scalability
The June 2018 release of EOS.IO software will run single threaded, yet it contains the data structures necessary for future multithreaded, parallel execution [6].

=== Parallel execution
Blockchain consensus depends upon deterministic (reproducible) behavior. This means all parallel execution must be free from the use of mutexes or other locking primitives. Without locks there must be some way to guarantee that transactions that may be executed in parallel do not create non-deterministic results [6].

=== How scope contributes to performance and scalability
To support parallel execution, each account can also define any number of scopes within their database. The block producers will schedule transaction in such a way that there is no conflict over memory access to scopes and therefore they can be executed in parallel [4].

=== Permission evaluation/verification performance
The permission evaluation process is "read-only" and changes to permissions made by transactions do not take effect until the end of a block. This means that all keys and permission evaluation for all transactions can be executed in parallel. Furthermore, this means that a rapid validation of permission is possible without starting costly application logic that would have to be rolled back. Lastly, it means that transaction permissions can be evaluated as pending transactions are received and do not need to be re-evaluated as they are applied. All things considered, permission verification represents a significant percentage of the computation required to validate transactions. Making this a read-only and trivially parallelizable process enables a dramatic increase in performance. [5]. 


== References
////
Source: https://github.com/EOSIO/eos/wiki/Smart-Contract
License: The MIT License (MIT)
Added by: @tpmccallum
////
[1] https://github.com/EOSIO/eos/wiki/Smart-Contract

////
Source: https://en.wikipedia.org/wiki/Centralisation
License: Wikipedia:CC BY-SA
Added by: @tpmccallum
////
[2] https://en.wikipedia.org/wiki/Centralisation

////
Source: https://www.etherchain.org/charts/topMiners
License: TBA
Added by: @tpmccallum
////
[3] https://www.etherchain.org/charts/topMiners

////
Source: https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md#actions--handlers
License: The MIT License (MIT)
Added by: @tpmccallum
////
[4] https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md#actions--handlers

////
Source: https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md#parallel-evaluation-of-permissions
License: The MIT License (MIT)
Added by: @tpmccallum
////
[5] https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md#parallel-evaluation-of-permissions

////
Source: https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md#deterministic-parallel-execution-of-applications
License: The MIT License (MIT)
Added by: @tpmccallum
////
[6] https://github.com/EOSIO/Documentation/blob/master/TechnicalWhitePaper.md#deterministic-parallel-execution-of-applications

== Appendices

=== Appendix A - results of EOSIO "make test" command in the eos/build directory
[source,bash]
----
Running tests...
Test project /home/timothymccallum/eos_dawn_3/eos/build
      Start  1: test_cypher_suites
 1/31 Test  #1: test_cypher_suites .....................   Passed    0.02 sec
      Start  2: validate_simple.token_abi
 2/31 Test  #2: validate_simple.token_abi ..............   Passed    0.03 sec
      Start  3: validate_eosio.token_abi
 3/31 Test  #3: validate_eosio.token_abi ...............   Passed    0.03 sec
      Start  4: validate_eosio.msig_abi
 4/31 Test  #4: validate_eosio.msig_abi ................   Passed    0.03 sec
      Start  5: validate_multi_index_test_abi
 5/31 Test  #5: validate_multi_index_test_abi ..........   Passed    0.03 sec
      Start  6: validate_eosio.system_abi
 6/31 Test  #6: validate_eosio.system_abi ..............   Passed    0.03 sec
      Start  7: validate_identity_abi
 7/31 Test  #7: validate_identity_abi ..................   Passed    0.03 sec
      Start  8: validate_identity_test_abi
 8/31 Test  #8: validate_identity_test_abi .............   Passed    0.03 sec
      Start  9: validate_currency_abi
 9/31 Test  #9: validate_currency_abi ..................   Passed    0.03 sec
      Start 10: validate_stltest_abi
10/31 Test #10: validate_stltest_abi ...................   Passed    0.03 sec
      Start 11: validate_exchange_abi
11/31 Test #11: validate_exchange_abi ..................   Passed    0.03 sec
      Start 12: validate_test.inline_abi
12/31 Test #12: validate_test.inline_abi ...............   Passed    0.03 sec
      Start 13: validate_asserter_abi
13/31 Test #13: validate_asserter_abi ..................   Passed    0.03 sec
      Start 14: validate_infinite_abi
14/31 Test #14: validate_infinite_abi ..................   Passed    0.03 sec
      Start 15: validate_proxy_abi
15/31 Test #15: validate_proxy_abi .....................   Passed    0.03 sec
      Start 16: validate_test_api_abi
16/31 Test #16: validate_test_api_abi ..................   Passed    0.03 sec
      Start 17: validate_test_api_mem_abi
17/31 Test #17: validate_test_api_mem_abi ..............   Passed    0.02 sec
      Start 18: validate_test_api_db_abi
18/31 Test #18: validate_test_api_db_abi ...............   Passed    0.03 sec
      Start 19: validate_test_api_multi_index_abi
19/31 Test #19: validate_test_api_multi_index_abi ......   Passed    0.03 sec
      Start 20: validate_eosio.bios_abi
20/31 Test #20: validate_eosio.bios_abi ................   Passed    0.03 sec
      Start 21: validate_noop_abi
21/31 Test #21: validate_noop_abi ......................   Passed    0.03 sec
      Start 22: validate_dice_abi
22/31 Test #22: validate_dice_abi ......................   Passed    0.03 sec
      Start 23: validate_tic_tac_toe_abi
23/31 Test #23: validate_tic_tac_toe_abi ...............   Passed    0.03 sec
      Start 24: chain_test_binaryen
24/31 Test #24: chain_test_binaryen ....................   Passed   52.40 sec
      Start 25: chain_test_wavm
25/31 Test #25: chain_test_wavm ........................   Passed  102.04 sec
      Start 26: nodeos_run_test
26/31 Test #26: nodeos_run_test ........................   Passed   57.08 sec
      Start 27: nodeos_run_remote_test
27/31 Test #27: nodeos_run_remote_test .................   Passed   84.29 sec
      Start 28: p2p_dawn515_test
28/31 Test #28: p2p_dawn515_test .......................   Passed    1.04 sec
      Start 29: nodeos_run_test-mongodb
29/31 Test #29: nodeos_run_test-mongodb ................   Passed   89.14 sec
      Start 30: distributed-transactions-test
30/31 Test #30: distributed-transactions-test ..........   Passed   59.62 sec
      Start 31: distributed-transactions-remote-test
31/31 Test #31: distributed-transactions-remote-test ...   Passed   65.65 sec

100% tests passed, 0 tests failed out of 31

Total Test time (real) = 511.91 sec
----

=== Appendix B - Default config.ini file
[source,bash]
----
# Track only transactions whose scopes involve the listed accounts. Default is to track all transactions. (eosio::account_history_plugin)
# filter_on_accounts =

# Limits the maximum time (in milliseconds) processing a single get_transactions call. (eosio::account_history_plugin)
get-transactions-time-limit = 3

# File to read Genesis State from (eosio::chain_plugin)
genesis-json = "genesis.json"

# override the initial timestamp in the Genesis State file (eosio::chain_plugin)
# genesis-timestamp =

# the location of the block log (absolute path or relative to application data dir) (eosio::chain_plugin)
block-log-dir = "blocks"

# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints. (eosio::chain_plugin)
# checkpoint =

# Limits the maximum time (in milliseconds) that a reversible block is allowed to run before being considered invalid (eosio::chain_plugin)
max-reversible-block-time = -1

# Limits the maximum time (in milliseconds) that is allowed a pushed transaction's code to execute before being considered invalid (eosio::chain_plugin)
max-pending-transaction-time = -1

# Limits the maximum time (in milliseconds) that is allowed a to push deferred transactions at the start of a block (eosio::chain_plugin)
max-deferred-transaction-time = 20

# Override default WASM runtime (eosio::chain_plugin)
# wasm-runtime =

# Time to wait, in milliseconds, between creating next faucet created account. (eosio::faucet_testnet_plugin)
faucet-create-interval-ms = 1000

# Name to use as creator for faucet created accounts. (eosio::faucet_testnet_plugin)
faucet-name = faucet

# [public key, WIF private key] for signing for faucet creator account (eosio::faucet_testnet_plugin)
faucet-private-key = ["EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV","5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3"]

# The local IP and port to listen for incoming http connections. (eosio::http_plugin)
http-server-address = 127.0.0.1:8888

# Specify the Access-Control-Allow-Origin to be returned on each request. (eosio::http_plugin)
# access-control-allow-origin =

# Specify the Access-Control-Allow-Headers to be returned on each request. (eosio::http_plugin)
# access-control-allow-headers =

# Specify if Access-Control-Allow-Credentials: true should be returned on each request. (eosio::http_plugin)
access-control-allow-credentials = false

# The queue size between nodeos and MongoDB plugin thread. (eosio::mongo_db_plugin)
mongodb-queue-size = 256

# MongoDB URI connection string, see: https://docs.mongodb.com/master/reference/connection-string/. If not specified then plugin is disabled. Default database 'EOS' is used if not specified in URI. (eosio::mongo_db_plugin)
# mongodb-uri =

# The actual host:port used to listen for incoming p2p connections. (eosio::net_plugin)
p2p-listen-endpoint = 0.0.0.0:9876

# An externally accessible host:port for identifying this node. Defaults to p2p-listen-endpoint. (eosio::net_plugin)
# p2p-server-address =

# The public endpoint of a peer node to connect to. Use multiple p2p-peer-address options as needed to compose a network. (eosio::net_plugin)
# p2p-peer-address =

# The name supplied to identify this node amongst the peers. (eosio::net_plugin)
agent-name = "EOS Test Agent"

# Can be 'any' or 'producers' or 'specified' or 'none'. If 'specified', peer-key must be specified at least once. If only 'producers', peer-key is not required. 'producers' and 'specified' may be combined. (eosio::net_plugin)
allowed-connection = any

# Optional public key of peer allowed to connect.  May be used multiple times. (eosio::net_plugin)
# peer-key =

# Tuple of [PublicKey, WIF private key] (may specify multiple times) (eosio::net_plugin)
# peer-private-key =

# Log level: one of 'all', 'debug', 'info', 'warn', 'error', or 'off' (eosio::net_plugin)
log-level-net-plugin = info

# Maximum number of clients from which connections are accepted, use 0 for no limit (eosio::net_plugin)
max-clients = 25

# number of seconds to wait before cleaning up dead connections (eosio::net_plugin)
connection-cleanup-period = 30

# True to require exact match of peer network version. (eosio::net_plugin)
network-version-match = 0

# number of blocks to retrieve in a chunk from any individual peer during synchronization (eosio::net_plugin)
sync-fetch-span = 100

# Enable block production, even if the chain is stale. (eosio::producer_plugin)
enable-stale-production = false

# Percent of producers (0-100) that must be participating in order to produce blocks (eosio::producer_plugin)
required-participation = 33

# ID of producer controlled by this node (e.g. inita; may specify multiple times) (eosio::producer_plugin)
# producer-name =

# Tuple of [public key, WIF private key] (may specify multiple times) (eosio::producer_plugin)
private-key = ["EOS6MRyAjQq8ud7hVNYcfnVPJqcVpscN5So8BhtHuGYqET5GDW5CV","5KQwrPbwdL6PhXujxW37FSSQZ1JiwsST4cqQzDeyXtP79zkvFD3"]

# The path of the wallet files (absolute path or relative to application data dir) (eosio::wallet_plugin)
wallet-dir = "."

# Timeout for unlocked wallet in seconds. Wallets will automatically lock after specified number of seconds of inactivity. Activity is defined as any wallet command e.g. list-wallets. (eosio::wallet_plugin)
# unlock-timeout =

# eosio key that will be imported automatically when a wallet is created. (eosio::wallet_plugin)
# eosio-key =

# Plugin(s) to enable, may be specified multiple times
# plugin =
----

